# 程序
program ::= <statement>+;
statement ::= <function-declaration> | <class-declaration> | <variable-declaration> | <common-statement>;

type ::= <value-type> | <identifier>;
# 以下是statement的4部分
# 函数声明（注意模板）
function-declaration ::= <function-head><function-body>;
function-head ::= ['template' '<' 'typename' <identifier> '>'] 'def' <identifier> '(' <foraml-parameter-list> ')' ['->' <type>];
function-body ::= '{' <statement-list> '}';
foraml-parameter-list ::= <type> <identifier> {','<type> <identifier>} | null;
statement-list ::= <common-statement>*;

# 类声明（注意模板）
class-declaration ::= <class-head> <class-body>;
class-head ::= ['template' '<' 'typename' <identifier> '>'] 'class' <identifier> ['extends' <identifier>];
class-body ::= '{' {public-block} {protected-block} {private-block} '}' ';';
public-block ::= 'public:' <class-statement-list>;
protected-block ::= 'protected:' <class-statement-list>;
private-block ::= 'private:' <class-statement-list>;
class-statement-list ::= {<function-declaration> | <variable-declaration>};

# 变量声明
variable-declaration ::= <type>['<' <type> '>'] <identifier> ';'|
                         <type>['<' <type> '>'] <identifier> '=' <expression> ';' |
                         <type>['<' <type> '>'] <identifier> '=' <identifier> ';' |
                         <type>['<' <type> '>'] <identifier> '(' <actual-parameter-list> ')' ';';


# 普通语句
common-statement ::= <if-statement> | <while-statement> | <for-statement> | <variable-declaration> |
                     <return-statement> | <expression-statement> | <jump-statement>;

# 以下是普通语句
# if语句
if-statement ::= 'if' '(' <relation-expression> ')' '{' <statement-list> '}'
                {'elif' '(' <relation-expression> ')' '{' <statement-list> '}'} {'else' '{' <statement-list> '}'};

# while语句
while-statement ::= 'while' '(' <relation-expression> ')' '{' <statement-list>  '}';
jump-statement ::= 'break' ';' | 'continue' ';';

# for语句（类似python的循环（限制左闭右开）、C++的循环、范围循环）
for-statement ::= 'for' <identifier> 'in' '(' <expression> ',' <expression> ')' '{' <statement-list> '}' |
                  'for' '(' [<variable-declaration> | <assign-expression>]';' [<relation-expression>] ';' [<assign-expression>]')' 
                  '{' <statement-list> '}' |
                  'for' '(' <type> <identifier> 'in' <identifier>')' '{' <statement-list> '}';




# 返回语句
return-statement ::= 'return' [<expression>] ';';

# 表达式语句
expression-statement ::= <expression> ';';

# 表达式
expression ::= <logical-expression> | <arithmetic-expression> | <string-expression> | 
                <slice-expression> | <assign-expression>;

# 赋值表达式
assign-expression ::= <identifier> '=' <expression> |
                        <array-access> '=' <expression>;

# 函数表达式（即函数调用）
function-expression ::= [<identifier> | 'this' '.'] <identifier> '(' <actual-parameter-list> ')';
acturl-parameter-list ::= <expression> {',' <expression> } | null;


# 字符串表达式
string-expression ::= <string-literal> | <identifier> | <string-operation> | <function-expression>;
string-operation ::= <string-expression> '+' <string-expression> |
                    <string-expression> '.' 'substr' '(' <expression> ',' <expression> ')' |
                    <string-expression> '.' 'reverse' |
                    <string-expression> '.' 'title' |
                    <string-expression> '.' 'uppercase' |
                    <string-expression> '.' 'lowercase';


# 切片表达式，返回一个数组
slice-expression ::= <identifier> '[' [<expression>] ':' [<expression>] ']';

# 算术表达式
arithmetic-expression ::= ['+' | '-'] <item> { <addition-operator> <item> };
addition-operation ::= '+' | '-';

# 逻辑表达式（包括逻辑运算和关系运算）
logical-expression ::= <factor> { <logical-operator> <factor>};
logical-operator ::= '&&' | '||';

# 关系表达式
relational-expression ::= <arithmetic-expression> <relational-operator> <arithmetic-expression>;
relational-operation ::= '>' | '>=' | '<' | '<=' | '==' | '!=';

# 项
item ::= <factor> { <multiplication-operator> <factor> };
multiplication-operator ::= '*' | '/' | '%' | '**' | '//';

# 因子（标识符、数组、括号表达式、字面值常量、函数表达式）
factor ::= <identifier> | <array-access> | '(' <expression> ')' | 
            <literal> | <function-expression> | <relational-expression>;

# 新增：数组访问
array-access ::= <identifier> '[' <expression> ']' | array-access '[' <expression> ']';